version: '3.8'

services:
  # Redis Cache (Local instead of ElastiCache)
  redis:
    image: redis:7-alpine
    container_name: sentiment-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-trading_password}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # PostgreSQL Database (Local instead of RDS)
  postgres:
    image: postgres:15-alpine
    container_name: sentiment-postgres
    environment:
      POSTGRES_DB: sentiment_trading
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-trading_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d sentiment_trading"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Sentiment Service
  sentiment-service:
    build:
      context: ./sentiment-service
      dockerfile: Dockerfile
    container_name: sentiment-analyzer
    ports:
      - "8001:8001"
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD:-trading_password}@redis:6379/0
      - POSTGRES_URL=postgresql://trading_user:${POSTGRES_PASSWORD:-trading_password}@postgres:5432/sentiment_trading
      - TWITTER_API_KEY=${TWITTER_API_KEY}
      - TWITTER_API_SECRET=${TWITTER_API_SECRET}
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
      - NEWS_API_KEY=${NEWS_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./configs:/app/configs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Trading Service
  trading-service:
    build:
      context: ./trading-service
      dockerfile: Dockerfile
    container_name: trading-bot
    ports:
      - "8002:8002"
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD:-trading_password}@redis:6379/0
      - POSTGRES_URL=postgresql://trading_user:${POSTGRES_PASSWORD:-trading_password}@postgres:5432/sentiment_trading
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY}
      - ALPACA_BASE_URL=${ALPACA_BASE_URL}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      sentiment-service:
        condition: service_healthy
    volumes:
      - ./configs:/app/configs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Dashboard Service
  dashboard-service:
    build:
      context: ./dashboard-service
      dockerfile: Dockerfile
    container_name: trading-dashboard
    ports:
      - "8501:8501"
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD:-trading_password}@redis:6379/0
      - POSTGRES_URL=postgresql://trading_user:${POSTGRES_PASSWORD:-trading_password}@postgres:5432/sentiment_trading
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./configs:/app/configs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx Reverse Proxy (Load Balancer simulation)
  nginx:
    image: nginx:alpine
    container_name: sentiment-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - sentiment-service
      - trading-service
      - dashboard-service
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: sentiment-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: sentiment-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:
